"""
Order handling module for the restaurant Telegram bot.
Handles order creation, viewing active orders, and order management.
"""
from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from models.menu import menu_manager
from models.orders import order_manager
from config import TABLE_COUNT, MENU_CATEGORIES, MAIN_CATEGORIES, ALL_CATEGORIES
from handlers.common import get_main_keyboard
from datetime import datetime

# Define states for order management
class OrderStates(StatesGroup):
    """States for order creation and management flow"""
    selecting_table = State()
    selecting_main_category = State()  # –ö—É—Ö–Ω—è/–ë–∞—Ä
    selecting_category = State()       # Subcategories
    selecting_menu_item = State()
    entering_quantity = State()
    viewing_order = State()
    managing_order = State()
    confirm_close = State()

router = Router()

# Keyboards
def get_tables_keyboard():
    """Create a keyboard with table selection buttons"""
    keyboard = []
    
    # Create buttons for tables in rows of 3
    for i in range(1, TABLE_COUNT + 1, 3):
        row = []
        for j in range(i, min(i + 3, TABLE_COUNT + 1)):
            row.append(KeyboardButton(text=f"–°—Ç–æ–ª {j}"))
        keyboard.append(row)
    
    keyboard.append([KeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")])
    
    return ReplyKeyboardMarkup(
        keyboard=keyboard,
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª"
    )

def get_main_categories_keyboard():
    """Create a keyboard with main categories (–ö—É—Ö–Ω—è/–ë–∞—Ä)"""
    keyboard = []
    
    for category in MAIN_CATEGORIES:
        keyboard.append([KeyboardButton(text=category)])
    
    keyboard.append([KeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑")])
    keyboard.append([KeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Å—Ç–æ–ª–∞–º")])
    
    return ReplyKeyboardMarkup(
        keyboard=keyboard,
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é"
    )

def get_subcategories_keyboard(main_category):
    """Create a keyboard with subcategories for the selected main category"""
    subcategories = MENU_CATEGORIES.get(main_category, [])
    keyboard = []
    
    # Add subcategories in rows of 2
    for i in range(0, len(subcategories), 2):
        row = []
        row.append(KeyboardButton(text=subcategories[i]))
        if i + 1 < len(subcategories):
            row.append(KeyboardButton(text=subcategories[i + 1]))
        keyboard.append(row)
    
    keyboard.append([KeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –æ—Å–Ω–æ–≤–Ω—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")])
    
    return ReplyKeyboardMarkup(
        keyboard=keyboard,
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é"
    )

def get_active_orders_keyboard():
    """Create a keyboard with active orders"""
    active_orders = order_manager.get_active_orders()
    keyboard = []
    
    # Group orders by tables
    for order in active_orders:
        keyboard.append([
            KeyboardButton(text=f"–°—Ç–æ–ª {order.table_number} - {len(order.items)} –ø–æ–∑.")
        ])
    
    keyboard.append([KeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")])
    
    return ReplyKeyboardMarkup(
        keyboard=keyboard,
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑"
    )

def get_order_actions_keyboard(order):
    """Create a keyboard with order management actions"""
    keyboard = [
        [KeyboardButton(text=f"‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏–∏ (–°—Ç–æ–ª {order.table_number})")],
        [KeyboardButton(text=f"‚úÖ –ó–∞–∫—Ä—ã—Ç—å –∑–∞–∫–∞–∑ (–°—Ç–æ–ª {order.table_number})")],
        [KeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –∑–∞–∫–∞–∑–∞–º")]
    ]
    
    return ReplyKeyboardMarkup(
        keyboard=keyboard,
        resize_keyboard=True
    )

def get_category_items_keyboard(category):
    """Create a keyboard with menu items for a specific category"""
    items = menu_manager.get_menu_items_by_category(category)
    keyboard = []
    
    # Add items in rows of 1
    for item in items:
        keyboard.append([KeyboardButton(text=f"{item.name}")])
    
    keyboard.append([KeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")])
    
    return ReplyKeyboardMarkup(
        keyboard=keyboard,
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–æ"
    )

def get_quantity_keyboard():
    """Create a keyboard for quantity selection"""
    keyboard = [
        [
            KeyboardButton(text="1"),
            KeyboardButton(text="2"),
            KeyboardButton(text="3"),
        ],
        [
            KeyboardButton(text="4"),
            KeyboardButton(text="5"),
            KeyboardButton(text="–î—Ä—É–≥–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ"),
        ],
        [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
    ]
    
    return ReplyKeyboardMarkup(
        keyboard=keyboard,
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ"
    )

def get_confirmation_keyboard():
    """Create a keyboard for order close confirmation"""
    keyboard = [
        [KeyboardButton(text="‚úÖ –î–∞, –∑–∞–∫—Ä—ã—Ç—å –∑–∞–∫–∞–∑"), KeyboardButton(text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞")]
    ]
    
    return ReplyKeyboardMarkup(
        keyboard=keyboard,
        resize_keyboard=True
    )

# Handlers
@router.message(F.text == "üÜï –ù–æ–≤—ã–π –∑–∞–∫–∞–∑")
async def new_order(message: Message, state: FSMContext):
    """Handle new order creation"""
    await state.set_state(OrderStates.selecting_table)
    await message.answer(
        "üÜï <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç–æ–ª–∞:",
        parse_mode="HTML",
        reply_markup=get_tables_keyboard()
    )

@router.message(F.text == "üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã")
async def show_active_orders(message: Message, state: FSMContext):
    active_orders = order_manager.get_active_orders()
    
    if not active_orders:
        await message.answer(
            "üìã <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã</b>\n\n"
            "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.",
            parse_mode="HTML",
            reply_markup=get_main_keyboard()
        )
        return
    
    # Save active order IDs to state for quick lookup
    order_map = {}
    for order in active_orders:
        key = f"–°—Ç–æ–ª {order.table_number} - {len(order.items)} –ø–æ–∑."
        order_map[key] = order.id
    
    await state.update_data(active_orders=order_map)
    await state.set_state(OrderStates.viewing_order)
    
    await message.answer(
        "üìã <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
        parse_mode="HTML",
        reply_markup=get_active_orders_keyboard()
    )

@router.message(OrderStates.selecting_table)
async def select_table(message: Message, state: FSMContext):
    text = message.text
    
    if text == "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await state.clear()
        await message.answer(
            "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=get_main_keyboard()
        )
        return
    
    # Parse table number from text ("–°—Ç–æ–ª X")
    if not text.startswith("–°—Ç–æ–ª "):
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª –∏–∑ —Å–ø–∏—Å–∫–∞:",
            reply_markup=get_tables_keyboard()
        )
        return
    
    try:
        table_number = int(text.split(" ")[1])
        if not 1 <= table_number <= TABLE_COUNT:
            raise ValueError("Invalid table number")
    except (ValueError, IndexError):
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª –∏–∑ —Å–ø–∏—Å–∫–∞:",
            reply_markup=get_tables_keyboard()
        )
        return
    
    # Check if table has an active order
    existing_order = order_manager.get_table_active_order(table_number)
    
    if existing_order:
        # If order exists, show it
        await state.update_data(current_order_id=existing_order.id)
        await state.set_state(OrderStates.managing_order)
        order_text = format_order_text(existing_order)
        
        await message.answer(
            f"üìã <b>–°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∑–∞–∫–∞–∑ –¥–ª—è —Å—Ç–æ–ª–∞ {table_number}</b>\n\n"
            f"{order_text}",
            parse_mode="HTML",
            reply_markup=get_order_actions_keyboard(existing_order)
        )
    else:
        # Create new order and show main categories (–ö—É—Ö–Ω—è/–ë–∞—Ä)
        order = order_manager.create_order(table_number)
        await state.update_data(current_order_id=order.id)
        await state.set_state(OrderStates.selecting_main_category)
        
        await message.answer(
            f"üÜï <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –¥–ª—è —Å—Ç–æ–ª–∞ {table_number}</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –º–µ–Ω—é:",
            parse_mode="HTML",
            reply_markup=get_main_categories_keyboard()
        )

@router.message(F.text == "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def back_to_main_menu(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=get_main_keyboard()
    )

@router.message(F.text == "üîô –ù–∞–∑–∞–¥ –∫ —Å—Ç–æ–ª–∞–º")
async def back_to_tables(message: Message, state: FSMContext):
    await state.set_state(OrderStates.selecting_table)
    await message.answer(
        "üÜï <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç–æ–ª–∞:",
        parse_mode="HTML",
        reply_markup=get_tables_keyboard()
    )

@router.message(F.text == "üîô –ù–∞–∑–∞–¥ –∫ –∑–∞–∫–∞–∑–∞–º")
async def back_to_active_orders(message: Message, state: FSMContext):
    active_orders = order_manager.get_active_orders()
    
    if not active_orders:
        await message.answer(
            "üìã <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã</b>\n\n"
            "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.",
            parse_mode="HTML",
            reply_markup=get_main_keyboard()
        )
        return
    
    # Save active order IDs to state for quick lookup
    order_map = {}
    for order in active_orders:
        key = f"–°—Ç–æ–ª {order.table_number} - {len(order.items)} –ø–æ–∑."
        order_map[key] = order.id
    
    await state.update_data(active_orders=order_map)
    await state.set_state(OrderStates.viewing_order)
    
    await message.answer(
        "üìã <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
        parse_mode="HTML",
        reply_markup=get_active_orders_keyboard()
    )

@router.message(OrderStates.selecting_main_category)
async def select_main_category(message: Message, state: FSMContext):
    text = message.text
    data = await state.get_data()
    order_id = data.get("current_order_id")
    
    if text == "üîô –ù–∞–∑–∞–¥ –∫ —Å—Ç–æ–ª–∞–º":
        await back_to_tables(message, state)
        return
    
    if text == "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑":
        order = order_manager.get_order_by_id(order_id)
        if not order:
            await message.answer(
                "‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                reply_markup=get_main_keyboard()
            )
            return
        
        if not order.items:
            # If no items in order, delete it
            order_manager.close_order(order_id)
            await message.answer(
                "‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω, —Ç–∞–∫ –∫–∞–∫ –Ω–µ –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏.",
                reply_markup=get_main_keyboard()
            )
            await state.clear()
            return
        
        # Show order summary
        order_text = format_order_text(order)
        
        await message.answer(
            f"‚úÖ <b>–ó–∞–∫–∞–∑ –¥–ª—è —Å—Ç–æ–ª–∞ {order.table_number} —Å–æ–∑–¥–∞–Ω</b>\n\n"
            f"{order_text}",
            parse_mode="HTML",
            reply_markup=get_main_keyboard()
        )
        
        await state.clear()
        return
    
    # Check if the text is a valid main category
    if text not in MAIN_CATEGORIES:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –º–µ–Ω—é –∏–∑ —Å–ø–∏—Å–∫–∞:",
            reply_markup=get_main_categories_keyboard()
        )
        return
    
    main_category = text
    await state.update_data(current_main_category=main_category)
    
    # Show subcategories for the selected main category
    await state.set_state(OrderStates.selecting_category)
    await message.answer(
        f"<b>{main_category}</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –±–ª—é–¥:",
        parse_mode="HTML",
        reply_markup=get_subcategories_keyboard(main_category)
    )

@router.message(OrderStates.selecting_category)
async def select_subcategory(message: Message, state: FSMContext):
    text = message.text
    data = await state.get_data()
    main_category = data.get("current_main_category")
    order_id = data.get("current_order_id")
    
    if text == "üîô –ù–∞–∑–∞–¥ –∫ –æ—Å–Ω–æ–≤–Ω—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º":
        await state.set_state(OrderStates.selecting_main_category)
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –º–µ–Ω—é:",
            parse_mode="HTML",
            reply_markup=get_main_categories_keyboard()
        )
        return
    
    # Get subcategories for current main category
    subcategories = MENU_CATEGORIES.get(main_category, [])
    
    # Check if selected text is a valid subcategory
    if text not in subcategories:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞:",
            reply_markup=get_subcategories_keyboard(main_category)
        )
        return
    
    category = text
    await state.update_data(current_category=category)
    
    items = menu_manager.get_menu_items_by_category(category)
    
    if not items:
        await message.answer(
            f"‚ùå –í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ \"{category}\" –Ω–µ—Ç –ø–æ–∑–∏—Ü–∏–π.",
            reply_markup=get_subcategories_keyboard(main_category)
        )
        return
    
    # Create keyboard with menu items
    keyboard = []
    for item in items:
        keyboard.append([KeyboardButton(text=f"{item.name}")])
    
    keyboard.append([KeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")])
    
    await state.set_state(OrderStates.selecting_menu_item)
    await message.answer(
        f"üçΩÔ∏è <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∑–∏—Ü–∏—é –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ \"{category}\"</b>",
        parse_mode="HTML",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=keyboard,
            resize_keyboard=True
        )
    )

@router.message(OrderStates.selecting_menu_item, F.text == "üîô –ù–∞–∑–∞–¥ –∫ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
async def back_to_subcategories(message: Message, state: FSMContext):
    data = await state.get_data()
    main_category = data.get("current_main_category")
    
    await state.set_state(OrderStates.selecting_category)
    await message.answer(
        f"<b>{main_category}</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –±–ª—é–¥:",
        parse_mode="HTML",
        reply_markup=get_subcategories_keyboard(main_category)
    )

@router.message(OrderStates.selecting_menu_item)
async def select_menu_item(message: Message, state: FSMContext):
    text = message.text
    data = await state.get_data()
    category = data.get("current_category")
    
    # Parse menu item from text
    items = menu_manager.get_menu_items_by_category(category)
    selected_item = None
    
    for item in items:
        if text.startswith(f"{item.name}"):
            selected_item = item
            break
    
    if not selected_item:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–æ –∏–∑ —Å–ø–∏—Å–∫–∞:",
            reply_markup=get_category_items_keyboard(category)
        )
        return
    
    await state.update_data(current_item_id=selected_item.id)
    
    await state.set_state(OrderStates.entering_quantity)
    await message.answer(
        f"üî¢ <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ</b>\n\n"
        f"–ë–ª—é–¥–æ: {selected_item.name}",
        parse_mode="HTML",
        reply_markup=get_quantity_keyboard()
    )

@router.message(OrderStates.entering_quantity, F.text == "üîô –ù–∞–∑–∞–¥")
async def back_to_items(message: Message, state: FSMContext):
    data = await state.get_data()
    category = data.get("current_category")
    
    items = menu_manager.get_menu_items_by_category(category)
    
    # Create keyboard with menu items
    keyboard = []
    for item in items:
        keyboard.append([KeyboardButton(text=f"{item.name}")])
    
    keyboard.append([KeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")])
    
    await state.set_state(OrderStates.selecting_menu_item)
    await message.answer(
        f"üçΩÔ∏è <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∑–∏—Ü–∏—é –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ \"{category}\"</b>",
        parse_mode="HTML",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=keyboard,
            resize_keyboard=True
        )
    )

@router.message(OrderStates.entering_quantity)
async def process_quantity(message: Message, state: FSMContext):
    text = message.text
    
    if text == "–î—Ä—É–≥–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ":
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (—á–∏—Å–ª–æ):",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]],
                resize_keyboard=True
            )
        )
        return
    
    if text == "üîô –ù–∞–∑–∞–¥" or text == "üîô –û—Ç–º–µ–Ω–∞":
        await back_to_items(message, state)
        return
    
    try:
        quantity = int(text)
        if quantity <= 0:
            raise ValueError("Quantity must be positive")
        
        await add_item_with_quantity(message, state, quantity)
    except ValueError:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.",
            reply_markup=get_quantity_keyboard()
        )

async def add_item_with_quantity(message, state, quantity):
    data = await state.get_data()
    order_id = data.get("current_order_id")
    item_id = data.get("current_item_id")
    main_category = data.get("current_main_category")
    
    order = order_manager.get_order_by_id(order_id)
    item = menu_manager.get_item_by_id(item_id)
    
    if not order or not item:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=get_main_keyboard()
        )
        return
    
    order.add_item(item, quantity)
    order_manager.save_orders()
    
    # Return to main category selection
    await state.set_state(OrderStates.selecting_main_category)
    await message.answer(
        f"‚úÖ –í –∑–∞–∫–∞–∑ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {item.name} x{quantity}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –º–µ–Ω—é –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –∑–∞–∫–∞–∑:",
        parse_mode="HTML",
        reply_markup=get_main_categories_keyboard()
    )

@router.message(OrderStates.viewing_order)
async def view_order(message: Message, state: FSMContext):
    text = message.text
    
    if text == "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await state.clear()
        await message.answer(
            "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=get_main_keyboard()
        )
        return
    
    # Get the order ID from state data
    data = await state.get_data()
    order_map = data.get("active_orders", {})
    order_id = order_map.get(text)
    
    if not order_id:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ –∏–∑ —Å–ø–∏—Å–∫–∞:",
            reply_markup=get_active_orders_keyboard()
        )
        return
    
    order = order_manager.get_order_by_id(order_id)
    if not order:
        await message.answer(
            "‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=get_active_orders_keyboard()
        )
        return
    
    await state.update_data(current_order_id=order_id)
    await state.set_state(OrderStates.managing_order)
    
    order_text = format_order_text(order)
    
    await message.answer(
        f"üìã <b>–ó–∞–∫–∞–∑ –¥–ª—è —Å—Ç–æ–ª–∞ {order.table_number}</b>\n\n"
        f"{order_text}",
        parse_mode="HTML",
        reply_markup=get_order_actions_keyboard(order)
    )

@router.message(OrderStates.managing_order)
async def manage_order(message: Message, state: FSMContext):
    text = message.text
    data = await state.get_data()
    order_id = data.get("current_order_id")
    
    if text == "üîô –ù–∞–∑–∞–¥ –∫ –∑–∞–∫–∞–∑–∞–º":
        await back_to_active_orders(message, state)
        return
    
    order = order_manager.get_order_by_id(order_id)
    if not order:
        await message.answer(
            "‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=get_main_keyboard()
        )
        return
    
    if text.startswith("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏–∏"):
        # Set to main category selection first
        await state.set_state(OrderStates.selecting_main_category)
        await message.answer(
            f"üÜï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π –≤ –∑–∞–∫–∞–∑ —Å—Ç–æ–ª–∞ {order.table_number}</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –º–µ–Ω—é:",
            parse_mode="HTML",
            reply_markup=get_main_categories_keyboard()
        )
        return
    
    if text.startswith("‚úÖ –ó–∞–∫—Ä—ã—Ç—å –∑–∞–∫–∞–∑"):
        # Show order summary and confirm closing
        order_text = format_order_text(order)
        
        await state.set_state(OrderStates.confirm_close)
        
        await message.answer(
            f"‚ö†Ô∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è –∑–∞–∫–∞–∑–∞</b>\n\n"
            f"{order_text}\n\n"
            f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫—Ä—ã—Ç—å –∑–∞–∫–∞–∑ –¥–ª—è —Å—Ç–æ–ª–∞ {order.table_number}?",
            parse_mode="HTML",
            reply_markup=get_confirmation_keyboard()
        )
        return
    
    await message.answer(
        "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞:",
        reply_markup=get_order_actions_keyboard(order)
    )

@router.message(OrderStates.confirm_close, F.text == "‚úÖ –î–∞, –∑–∞–∫—Ä—ã—Ç—å –∑–∞–∫–∞–∑")
async def confirm_close_order(message: Message, state: FSMContext):
    data = await state.get_data()
    order_id = data.get("current_order_id")
    
    if not order_id:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞! –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
            reply_markup=get_main_keyboard()
        )
        return
    
    # Get order before closing for summary
    order = order_manager.get_order_by_id(order_id)
    if not order:
        await message.answer(
            "‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω! –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —É–∂–µ –∑–∞–∫—Ä—ã—Ç.",
            reply_markup=get_main_keyboard()
        )
        return
    
    # Close the order
    if order_manager.close_order(order_id):
        # Format a nice receipt
        timestamp = datetime.fromisoformat(order.timestamp).strftime("%d.%m.%Y %H:%M")
        
        receipt = (
            f"‚úÖ <b>–ó–ê–ö–ê–ó #{order.id} –ó–ê–ö–†–´–¢</b>\n\n"
            f"<b>–î–∞—Ç–∞:</b> {timestamp}\n"
            f"<b>–°—Ç–æ–ª:</b> {order.table_number}\n\n"
            f"<b>–°–û–°–¢–ê–í –ó–ê–ö–ê–ó–ê:</b>\n"
        )
        
        # List all ordered items
        items_by_category = {}
        for item in order.items:
            category = item.menu_item.category
            if category not in items_by_category:
                items_by_category[category] = []
            items_by_category[category].append(item)
        
        # Format items by category
        for category, items in items_by_category.items():
            receipt += f"<b>{category}:</b>\n"
            for i, item in enumerate(items, 1):
                menu_item = item.menu_item
                receipt += f"  {i}. {menu_item.name} x{item.quantity}\n"
        
        await message.answer(
            receipt,
            parse_mode="HTML",
            reply_markup=get_main_keyboard()
        )
    else:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –∑–∞–∫–∞–∑–∞!",
            reply_markup=get_main_keyboard()
        )

@router.message(OrderStates.confirm_close, F.text == "‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞")
async def cancel_close_order(message: Message, state: FSMContext):
    data = await state.get_data()
    order_id = data.get("current_order_id")
    
    if not order_id:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞! –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
            reply_markup=get_main_keyboard()
        )
        return
        
    order = order_manager.get_order_by_id(order_id)
    if order:
        await state.set_state(OrderStates.managing_order)
        await message.answer(
            "–û—Ç–º–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –∑–∞–∫–∞–∑–∞. –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∑–∞–∫–∞–∑–æ–º.",
            reply_markup=get_order_actions_keyboard(order)
        )
    else:
        await message.answer(
            "‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=get_main_keyboard()
        )

def format_order_text(order):
    """Format order details as text"""
    text = f"<b>–ó–∞–∫–∞–∑ #{order.id} (–°—Ç–æ–ª {order.table_number})</b>\n\n"
    
    if not order.items:
        text += "–ó–∞–∫–∞–∑ –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ –º–µ–Ω—é.\n"
        return text
    
    # Group items by category
    items_by_category = {}
    for item in order.items:
        category = item.menu_item.category
        if category not in items_by_category:
            items_by_category[category] = []
        items_by_category[category].append(item)
    
    # Format items by category
    for category, items in items_by_category.items():
        text += f"<b>{category}:</b>\n"
        for i, item in enumerate(items, 1):
            menu_item = item.menu_item
            text += f"    {i}. {menu_item.name} x{item.quantity}\n"
    
    text += "\n"
    
    return text 