"""
Menu handling module for the restaurant Telegram bot.
Handles menu viewing and management (adding/deleting items).
"""
from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from models.menu import menu_manager
from handlers.common import get_main_keyboard

# Define states for menu management
class MenuStates(StatesGroup):
    """States for menu management flow"""
    main_menu = State()
    edit_menu = State()
    adding_item_main_category = State()
    adding_item_category = State()
    adding_item_name = State()
    deleting_main_category = State()
    deleting_category = State()
    deleting_item_select = State()
    confirm_delete = State()

router = Router()

# Keyboards
def get_menu_main_keyboard():
    """Create a keyboard with 'Edit Menu' and 'Back' options"""
    keyboard = [
        [KeyboardButton(text="‚öôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –º–µ–Ω—é")],
        [KeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
    ]
    
    return ReplyKeyboardMarkup(
        keyboard=keyboard,
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ"
    )

def get_edit_menu_keyboard():
    """Create a keyboard with menu editing options"""
    keyboard = [
        [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é")],
        [KeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é")],
        [KeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")]
    ]
    
    return ReplyKeyboardMarkup(
        keyboard=keyboard,
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ"
    )

def get_main_categories_keyboard():
    """Create a keyboard with main categories (–ö—É—Ö–Ω—è/–ë–∞—Ä)"""
    main_categories = menu_manager.get_main_categories()
    keyboard = []
    
    for category in main_categories:
        keyboard.append([KeyboardButton(text=category)])
    
    keyboard.append([KeyboardButton(text="üîô –ù–∞–∑–∞–¥")])
    
    return ReplyKeyboardMarkup(
        keyboard=keyboard,
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é"
    )

def get_subcategories_keyboard(main_category):
    """Create a keyboard with subcategories for the selected main category"""
    subcategories = menu_manager.get_subcategories(main_category)
    keyboard = []
    
    # Add subcategories in rows of 2
    for i in range(0, len(subcategories), 2):
        row = []
        row.append(KeyboardButton(text=subcategories[i]))
        if i + 1 < len(subcategories):
            row.append(KeyboardButton(text=subcategories[i + 1]))
        keyboard.append(row)
    
    keyboard.append([KeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")])
    
    return ReplyKeyboardMarkup(
        keyboard=keyboard,
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é"
    )

def get_category_items_keyboard(category):
    """Create a keyboard with menu items for a specific category"""
    items = menu_manager.get_menu_items_by_category(category)
    keyboard = []
    
    # Add items in rows of 1
    for item in items:
        keyboard.append([KeyboardButton(text=f"{item.name}")])
    
    keyboard.append([KeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")])
    
    return ReplyKeyboardMarkup(
        keyboard=keyboard,
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–æ"
    )

# Handlers
@router.message(F.text == "üçΩÔ∏è –ú–µ–Ω—é")
async def show_menu(message: Message, state: FSMContext):
    """Handler for the main menu button"""
    await state.set_state(MenuStates.main_menu)
    await message.answer(
        "üçΩÔ∏è <b>–ú–µ–Ω—é —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode="HTML",
        reply_markup=get_menu_main_keyboard()
    )

# Main menu handlers
@router.message(MenuStates.main_menu)
async def handle_main_menu(message: Message, state: FSMContext):
    text = message.text
    
    if text == "‚öôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –º–µ–Ω—é":
        await state.set_state(MenuStates.edit_menu)
        await message.answer(
            "‚öôÔ∏è <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –º–µ–Ω—é</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            parse_mode="HTML",
            reply_markup=get_edit_menu_keyboard()
        )
        return
    
    if text == "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await state.clear()
        await message.answer(
            "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=get_main_keyboard()
        )
        return
    
    await message.answer(
        "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞:",
        reply_markup=get_menu_main_keyboard()
    )

# Edit Menu Handlers
@router.message(MenuStates.edit_menu)
async def handle_edit_menu(message: Message, state: FSMContext):
    text = message.text
    
    if text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é":
        await add_item_start(message, state)
    elif text == "‚ûñ –£–¥–∞–ª–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é":
        await delete_item_start(message, state)
    elif text == "üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é":
        await back_to_menu(message, state)
    else:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞:",
            reply_markup=get_edit_menu_keyboard()
        )

@router.message(F.text == "üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
async def back_to_menu(message: Message, state: FSMContext):
    await state.set_state(MenuStates.main_menu)
    await message.answer(
        "üçΩÔ∏è <b>–ú–µ–Ω—é —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode="HTML",
        reply_markup=get_menu_main_keyboard()
    )

# Add item handlers
async def add_item_start(message: Message, state: FSMContext):
    main_categories = menu_manager.get_main_categories()
    keyboard = []
    
    for category in main_categories:
        keyboard.append([KeyboardButton(text=category)])
    
    keyboard.append([KeyboardButton(text="üîô –ù–∞–∑–∞–¥")])
    
    await state.set_state(MenuStates.adding_item_main_category)
    await message.answer(
        "‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é (–ö—É—Ö–Ω—è/–ë–∞—Ä):",
        parse_mode="HTML",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=keyboard,
            resize_keyboard=True,
            input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é"
        )
    )

@router.message(MenuStates.adding_item_main_category)
async def select_add_main_category(message: Message, state: FSMContext):
    main_category = message.text
    
    if main_category == "üîô –ù–∞–∑–∞–¥":
        await state.set_state(MenuStates.edit_menu)
        await message.answer(
            "‚öôÔ∏è <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –º–µ–Ω—é</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            parse_mode="HTML",
            reply_markup=get_edit_menu_keyboard()
        )
        return
    
    main_categories = menu_manager.get_main_categories()
    if main_category not in main_categories:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞.",
            parse_mode="HTML"
        )
        return
    
    await state.update_data(new_item_main_category=main_category)
    
    # Get subcategories for the selected main category
    subcategories = menu_manager.get_subcategories(main_category)
    keyboard = []
    
    for subcategory in subcategories:
        keyboard.append([KeyboardButton(text=subcategory)])
    
    keyboard.append([KeyboardButton(text="üîô –ù–∞–∑–∞–¥")])
    
    await state.set_state(MenuStates.adding_item_category)
    await message.answer(
        f"‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏</b>\n\n"
        f"–í—ã–±—Ä–∞–Ω–∞ –æ—Å–Ω–æ–≤–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {main_category}\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        parse_mode="HTML",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=keyboard,
            resize_keyboard=True
        )
    )

@router.message(MenuStates.adding_item_category)
async def select_add_category(message: Message, state: FSMContext):
    category = message.text
    data = await state.get_data()
    main_category = data.get("new_item_main_category")
    
    if category == "üîô –ù–∞–∑–∞–¥":
        await add_item_start(message, state)
        return
    
    subcategories = menu_manager.get_subcategories(main_category)
    if category not in subcategories:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞.",
            parse_mode="HTML"
        )
        return
    
    await state.update_data(new_item_category=category)
    await state.set_state(MenuStates.adding_item_name)
    
    await message.answer(
        f"‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {category}</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞:",
        parse_mode="HTML",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]],
            resize_keyboard=True
        )
    )

@router.message(MenuStates.adding_item_name)
async def process_item_name(message: Message, state: FSMContext):
    name = message.text
    
    if name == "üîô –ù–∞–∑–∞–¥":
        data = await state.get_data()
        main_category = data.get("new_item_main_category")
        
        await state.set_state(MenuStates.adding_item_category)
        subcategories = menu_manager.get_subcategories(main_category)
        keyboard = []
        
        for subcat in subcategories:
            keyboard.append([KeyboardButton(text=subcat)])
        
        keyboard.append([KeyboardButton(text="üîô –ù–∞–∑–∞–¥")])
        
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏:",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=keyboard,
                resize_keyboard=True,
                input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é"
            )
        )
        return
    
    await state.update_data(new_item_name=name)
    
    # Add the menu item directly without asking for price
    data = await state.get_data()
    category = data.get("new_item_category")
    main_category = data.get("new_item_main_category")
    
    # Add the item with category and main_category
    menu_manager.add_item(name=name, category=category, main_category=main_category)
    
    await state.set_state(MenuStates.edit_menu)
    await message.answer(
        f"‚úÖ –ü–æ–∑–∏—Ü–∏—è \"{name}\" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é \"{category}\".",
        reply_markup=get_edit_menu_keyboard()
    )

# Delete item handlers
async def delete_item_start(message: Message, state: FSMContext):
    main_categories = menu_manager.get_main_categories()
    keyboard = []
    
    for category in main_categories:
        keyboard.append([KeyboardButton(text=category)])
    
    keyboard.append([KeyboardButton(text="üîô –ù–∞–∑–∞–¥")])
    
    await state.set_state(MenuStates.deleting_main_category)
    await message.answer(
        "‚ûñ <b>–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é (–ö—É—Ö–Ω—è/–ë–∞—Ä):",
        parse_mode="HTML",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=keyboard,
            resize_keyboard=True
        )
    )

@router.message(MenuStates.deleting_main_category)
async def select_delete_main_category(message: Message, state: FSMContext):
    main_category = message.text
    
    if main_category == "üîô –ù–∞–∑–∞–¥":
        await state.set_state(MenuStates.edit_menu)
        await message.answer(
            "‚öôÔ∏è <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –º–µ–Ω—é</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            parse_mode="HTML",
            reply_markup=get_edit_menu_keyboard()
        )
        return
    
    main_categories = menu_manager.get_main_categories()
    if main_category not in main_categories:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞.",
            parse_mode="HTML"
        )
        return
    
    await state.update_data(delete_main_category=main_category)
    
    # Get subcategories for the selected main category
    subcategories = menu_manager.get_subcategories(main_category)
    keyboard = []
    
    for subcategory in subcategories:
        keyboard.append([KeyboardButton(text=subcategory)])
    
    keyboard.append([KeyboardButton(text="üîô –ù–∞–∑–∞–¥")])
    
    await state.set_state(MenuStates.deleting_category)
    await message.answer(
        f"‚ûñ <b>–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏</b>\n\n"
        f"–í—ã–±—Ä–∞–Ω–∞ –æ—Å–Ω–æ–≤–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {main_category}\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        parse_mode="HTML",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=keyboard,
            resize_keyboard=True
        )
    )

@router.message(MenuStates.deleting_category)
async def select_delete_category(message: Message, state: FSMContext):
    category = message.text
    data = await state.get_data()
    main_category = data.get("delete_main_category")
    
    if category == "üîô –ù–∞–∑–∞–¥":
        await delete_item_start(message, state)
        return
    
    subcategories = menu_manager.get_subcategories(main_category)
    if category not in subcategories:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞.",
            parse_mode="HTML"
        )
        return
    
    items = menu_manager.get_menu_items_by_category(category)
    
    if not items:
        await state.set_state(MenuStates.edit_menu)
        await message.answer(
            f"‚ùå –í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ \"{category}\" –Ω–µ—Ç –ø–æ–∑–∏—Ü–∏–π.",
            reply_markup=get_edit_menu_keyboard()
        )
        return
    
    await state.update_data(delete_category=category)
    
    keyboard = []
    for item in items:
        keyboard.append([KeyboardButton(text=item.name)])
    
    keyboard.append([KeyboardButton(text="üîô –ù–∞–∑–∞–¥")])
    
    await state.set_state(MenuStates.deleting_item_select)
    await message.answer(
        f"‚ûñ <b>–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {category}</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∑–∏—Ü–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        parse_mode="HTML",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=keyboard,
            resize_keyboard=True
        )
    )

@router.message(MenuStates.deleting_item_select)
async def confirm_delete_item(message: Message, state: FSMContext):
    item_name = message.text
    
    if item_name == "üîô –ù–∞–∑–∞–¥":
        data = await state.get_data()
        main_category = data.get("delete_main_category")
        await state.set_state(MenuStates.deleting_category)
        
        # Get subcategories and show keyboard again
        subcategories = menu_manager.get_subcategories(main_category)
        keyboard = []
        for subcategory in subcategories:
            keyboard.append([KeyboardButton(text=subcategory)])
        keyboard.append([KeyboardButton(text="üîô –ù–∞–∑–∞–¥")])
        
        await message.answer(
            f"‚ûñ <b>–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏</b>\n\n"
            f"–í—ã–±—Ä–∞–Ω–∞ –æ—Å–Ω–æ–≤–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {main_category}\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            parse_mode="HTML",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=keyboard,
                resize_keyboard=True
            )
        )
        return
    
    data = await state.get_data()
    category = data.get("delete_category")
    
    # Find the item
    items = menu_manager.get_menu_items_by_category(category)
    item = next((item for item in items if item.name == item_name), None)
    
    if not item:
        await message.answer(
            "‚ùå –ü–æ–∑–∏—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
            reply_markup=get_edit_menu_keyboard()
        )
        return
    
    await state.update_data(delete_item_id=item.id, delete_item_name=item.name)
    
    keyboard = [
        [KeyboardButton(text="‚úÖ –î–∞"), KeyboardButton(text="‚ùå –ù–µ—Ç")]
    ]
    
    await state.set_state(MenuStates.confirm_delete)
    await message.answer(
        f"‚ö†Ô∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è</b>\n\n"
        f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å \"{item.name}\" –∏–∑ –º–µ–Ω—é?",
        parse_mode="HTML",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=keyboard,
            resize_keyboard=True
        )
    )

@router.message(MenuStates.confirm_delete)
async def final_delete_item(message: Message, state: FSMContext):
    response = message.text
    
    if response == "‚ùå –ù–µ—Ç":
        data = await state.get_data()
        category = data.get("delete_category")
        main_category = data.get("delete_main_category")
        
        # Go back to item selection
        items = menu_manager.get_menu_items_by_category(category)
        keyboard = []
        for item in items:
            keyboard.append([KeyboardButton(text=item.name)])
        keyboard.append([KeyboardButton(text="üîô –ù–∞–∑–∞–¥")])
        
        await state.set_state(MenuStates.deleting_item_select)
        await message.answer(
            f"‚ûñ <b>–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {category}</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∑–∏—Ü–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
            parse_mode="HTML",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=keyboard,
                resize_keyboard=True
            )
        )
        return
    
    if response == "‚úÖ –î–∞":
        data = await state.get_data()
        item_id = data.get("delete_item_id")
        item_name = data.get("delete_item_name")
        category = data.get("delete_category")
        
        success = menu_manager.delete_item(item_id)
        
        await state.set_state(MenuStates.edit_menu)
        if success:
            await message.answer(
                f"‚úÖ –ü–æ–∑–∏—Ü–∏—è \"{item_name}\" —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ \"{category}\".",
                reply_markup=get_edit_menu_keyboard()
            )
        else:
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–∏.",
                reply_markup=get_edit_menu_keyboard()
            )
    else:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –î–∞ –∏–ª–∏ –ù–µ—Ç.",
            parse_mode="HTML"
        ) 